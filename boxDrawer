# BOX DRAWER

import matplotlib.pyplot as plt
import numpy as np
from mpl_toolkits.mplot3d import Axes3D


# Box drawer.
def dummyFunc(Y, Z):
    return Y**2 + Z**2

#figbox = plt.figure()
#ax = figbox.add_subplot(111, projection = '3d')


# Straight ahead.
def S_planeGenerator(xsize, zpos, ysize, clor, ax):
    X_S = np.arange(-xsize/2, xsize/2 + 0.05, 0.05)
    Y_S = np.arange(-ysize/2, ysize/2 + 0.05, 0.05)
    X_S, Y_S = np.meshgrid(X_S, Y_S)
    Z_S = dummyFunc(X_S, Y_S)
    Z_S = Z_S*0 + zpos
    return ax.plot_surface(X_S, Z_S, Y_S, color = clor, alpha = 0.1)

# Left-right.
def LR_planeGenerator(xpos, zsize, ysize, zpos, clor, ax):
    Z_LR = np.arange(zpos - zsize, zpos + 0.05, 0.05)
    Y_LR = np.arange(-ysize/2, ysize/2 + 0.05, 0.05)
    Z_LR, Y_LR = np.meshgrid(Z_LR, Y_LR)
    X_LR = dummyFunc(Z_LR, Y_LR)
    X_LR = X_LR*0 + xpos
    return ax.plot_surface(X_LR, Z_LR, Y_LR, color = clor, alpha = 0.5), ax.plot_surface(-X_LR, Z_LR, Y_LR, color = 'blue', alpha = 0.3)

# Top-bottom.
def TB_planeGenerator(xsize, zsize, ypos, zpos, clor, ax):
    X_TB = np.arange(-xsize/2, xsize/2 + 0.05, 0.05)
    Z_TB = np.arange(zpos - zsize, zpos + 0.05, 0.05)
    X_TB, Z_TB = np.meshgrid(X_TB, Z_TB)
    Y_TB = dummyFunc(X_TB, Z_TB)
    Y_TB = Y_TB*0 + ypos
    return ax.plot_surface(X_TB, Z_TB, Y_TB, color = clor, alpha = 0.1), ax.plot_surface(X_TB, Z_TB, -Y_TB, color = 'blue', alpha = 0.3)
